/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.85
 * Generated at: 2024-02-14 13:28:38 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class register_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("    <title>Floating Registration Page</title>\r\n");
      out.write("    <style>\r\n");
      out.write("        body {\r\n");
      out.write("            margin: 0;\r\n");
      out.write("            padding: 0;\r\n");
      out.write("            height: 100vh;\r\n");
      out.write("            display: flex;\r\n");
      out.write("            justify-content: center;\r\n");
      out.write("            align-items: center;\r\n");
      out.write("            background: url('https://www.uti.eu.com/wp-content/uploads/law-enforcement-record-management-00.jpg') center/cover no-repeat;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .register-container {\r\n");
      out.write("            background: rgba(10, 28, 49, 0.9);\r\n");
      out.write("            padding: 20px;\r\n");
      out.write("            border-radius: 10px;\r\n");
      out.write("            box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);\r\n");
      out.write("            width: 300px;\r\n");
      out.write("            text-align: center;\r\n");
      out.write("            color: #fff;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .register-container input, .register-container select {\r\n");
      out.write("            width: 100%;\r\n");
      out.write("            padding: 10px;\r\n");
      out.write("            margin: 10px 0;\r\n");
      out.write("            box-sizing: border-box;\r\n");
      out.write("            border: 1px solid #3498db;\r\n");
      out.write("            border-radius: 5px;\r\n");
      out.write("            background-color: rgba(255, 255, 255, 0.1);\r\n");
      out.write("            color: #fff;\r\n");
      out.write("            outline: none;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .register-container input:focus, .register-container select:focus {\r\n");
      out.write("            background-color: rgba(255, 255, 255, 0.2);\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .register-container button {\r\n");
      out.write("            width: 100%;\r\n");
      out.write("            padding: 10px;\r\n");
      out.write("            background-color: #3498db;\r\n");
      out.write("            color: #fff;\r\n");
      out.write("            border: none;\r\n");
      out.write("            border-radius: 5px;\r\n");
      out.write("            cursor: pointer;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .register-container button:hover {\r\n");
      out.write("            background-color: #297fb8;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .register-container a {\r\n");
      out.write("            color: #bbb;\r\n");
      out.write("            text-decoration: none;\r\n");
      out.write("            margin-top: 10px;\r\n");
      out.write("            display: inline-block;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .register-container a:hover {\r\n");
      out.write("            color: #fff;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        /* Adjust styling for gender input */\r\n");
      out.write("        .gender-container {\r\n");
      out.write("            display: flex;\r\n");
      out.write("            align-items: center;\r\n");
      out.write("            justify-content: center;\r\n");
      out.write("            margin-bottom: 10px;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .gender-container input[type=\"radio\"] {\r\n");
      out.write("            margin-right: 5px;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .gender-container label {\r\n");
      out.write("            margin-right: 15px;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        /* Display registration success message */\r\n");
      out.write("        .success-message {\r\n");
      out.write("            color: green;\r\n");
      out.write("            text-align: center;\r\n");
      out.write("            margin-top: 20px;\r\n");
      out.write("        }\r\n");
      out.write("    </style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    <div class=\"register-container\">\r\n");
      out.write("        <h2>Register</h2>\r\n");
      out.write("        <!-- Display registration success message if set -->\r\n");
      out.write("        ");
 String successMessage = (String) session.getAttribute("successMessage"); 
      out.write("\r\n");
      out.write("        ");
 if (successMessage != null) { 
      out.write("\r\n");
      out.write("            <div class=\"success-message\">");
      out.print( successMessage );
      out.write("</div>\r\n");
      out.write("            ");
 session.removeAttribute("successMessage"); 
      out.write(" <!-- Remove success message from session after displaying -->\r\n");
      out.write("        ");
 } 
      out.write("\r\n");
      out.write("        <form action=\"register\" method=\"post\" class=\"form-group\">\r\n");
      out.write("            <input type=\"text\" name=\"txtname\" placeholder=\"Username\" required>\r\n");
      out.write("            <input type=\"email\" name=\"txtemail\"  placeholder=\"Email\" required>\r\n");
      out.write("            <input type=\"password\" name=\"txtpassword\" placeholder=\"Password\" required>\r\n");
      out.write("            <label for=\"gender\">Gender:</label>\r\n");
      out.write("            <div class=\"gender-container\">\r\n");
      out.write("                <input type=\"radio\" id=\"male\" name=\"gender\" value=\"male\">\r\n");
      out.write("                <label for=\"male\">Male</label>\r\n");
      out.write("                <input type=\"radio\" id=\"female\" name=\"gender\" value=\"female\">\r\n");
      out.write("                <label for=\"female\">Female</label>\r\n");
      out.write("                <input type=\"radio\" id=\"other\" name=\"gender\" value=\"other\">\r\n");
      out.write("                <label for=\"other\">Other</label>\r\n");
      out.write("            </div>\r\n");
      out.write("            <label for=\"dob\">Date of Birth:</label>\r\n");
      out.write("            <input name=\"txtdate\"  type=\"date\" id=\"dob\" name=\"dob\" required>\r\n");
      out.write("            <button type=\"submit\">Register</button>\r\n");
      out.write("        </form>\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("    <script>\r\n");
      out.write("        // JavaScript code can remain unchanged\r\n");
      out.write("        const passwordInput = document.querySelector('input[type=\"password\"]');\r\n");
      out.write("        const toggleIcon = document.querySelector('.toggle-icon');\r\n");
      out.write("\r\n");
      out.write("        toggleIcon.addEventListener('click', () => {\r\n");
      out.write("            const type = passwordInput.getAttribute('type') === 'password' ? 'text' : 'password';\r\n");
      out.write("            passwordInput.setAttribute('type', type);\r\n");
      out.write("            toggleIcon.textContent = type === 'password' ? '\\uD83D\\uDD41' : '\\uD83D\\uDD13';\r\n");
      out.write("        });\r\n");
      out.write("    </script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
